searchState.loadedDescShard("rerun", 11, "A <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nHolds either an owned <code>ComponentBatch</code> that lives on heap, …\nAn arbitrary named indicator component.\nContains the success value\nContains the success value\nApproximations of stack and heap size for both internal …\nThe unique name of a space view type.\nViews are the panels shown in the viewer’s viewport and …\nReturns the names of all components that must, should and …\nFundamental <code>Archetype</code>s that are implemented in …\nThe underlying <code>arrow2::datatypes::DataType</code>, excluding …\nThe underlying <code>arrow::datatypes::DataType</code>, excluding …\nExposes the object’s contents as a set of <code>ComponentBatch</code>…\nFundamental <code>Component</code>s that are implemented in …\nFundamental datatypes that are implemented in <code>re_types_core</code>…\nImplements <code>crate::Component</code> for any given type that is a …\nReadable name for displaying in ui.\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow2 array, deserializes it into a collection …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow2 array, deserializes it into a collection …\nGiven an Arrow array, deserializes it into a collection of …\nReturns the total size of <code>self</code> on the heap, in bytes.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nCreates a <code>ComponentBatch</code> out of the associated …\nIs <code>Self</code> just plain old data?\nThe fully-qualified name of this archetype, e.g. …\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nReturns the names of all components that <em>may</em> be provided …\nReturns the names of all components that <em>should</em> be …\nRun-time reflection for reading meta-data about components …\nReturns the names of all components that <em>must</em> be provided …\nReturns the total size of <code>self</code> on the stack, in bytes.\nUseful macro for staticlly asserting that a <code>struct</code> …\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nGiven an iterator of options of owned or reference values …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nReturns the total size of <code>self</code> in bytes, accounting for …\n<strong>Archetype</strong>: Empties all the components of an entity.\n<strong>Component</strong>: Configures how a clear operation should behave …\nBoundary is an absolute value.\n<strong>Datatype</strong>: A single boolean.\nBoundary is a value relative to the time cursor.\n<strong>Datatype</strong>: A path to an entity in the <code>ChunkStore</code>.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Datatype</strong>: A double-precision 64-bit IEEE 754 floating …\nThe boundary extends to infinity.\n<strong>Datatype</strong>: A 64-bit number describing either nanoseconds OR …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\n<strong>Datatype</strong>: Left or right boundary of a time range.\n<strong>Datatype</strong>: A 16bit unsigned integer.\n<strong>Datatype</strong>: A 32bit unsigned integer.\n<strong>Datatype</strong>: A 64bit unsigned integer.\n<strong>Datatype</strong>: A string of text, encoded as UTF-8.\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nHigh time boundary for sequence timeline.\nTime range to use for this timeline.\nLow time boundary for sequence timeline.\nName of the timeline this applies to.\nIterator of a chain of source errors.\nProvides the <code>context</code> method for <code>Result</code>.\nContains the error value\nThe <code>Error</code> type, a wrapper around a dynamic error type.\nEquivalent to Ok::&lt;_, anyhow::Error&gt;(value).\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nConstruct an ad-hoc error from a string or existing non-…\nReturn early with an error.\nWrap the error value with additional context.\nReturn early with an error if a condition is not satisfied.\nConstruct an ad-hoc error from a string or existing non-…\nWrap the error value with additional context that is …\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nThe type of the field (it’s always a component).\nCustom placeholder value, used when not fallback was …\nDatatype of the component.\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nComputes a placeholder for a given arrow datatype.\nIs this a required component?\nAll variants, in the order they appear in the enum.\nThe views that this archetype can be added to.\n64-bit hash.\nA <code>EntityPath</code> plus a <code>ComponentName</code>.\nA general path to some data.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA way to filter a set of <code>EntityPath</code>s.\nA 64 bit hash of <code>EntityPath</code> with very small risk of …\nThe different parts that make up an <code>EntityPath</code>.\nA set of substitutions for entity paths.\n“color”\n<code>camera / &quot;left&quot; / points / #42</code>\nIf true, ALSO include children and grandchildren of this …\nAn integer that is known not to equal its minimum value.\nUsed e.g. for frames in a film.\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nAn error type returned when a checked integral type …\nSend <code>LogMsg</code>es to a server over TCP.\nServer connection error.\nComes after version.\nAdded <code>PROTOCOL_HEADER</code>. Introduced for Rerun 0.16.\nThe default amount of time to wait for the TCP connection …\nThe default address of a Rerun TCP server which an SDK …\nIf the latency in the <code>LogMsg</code> channel is greater than this, …\nTurns <code>info</code>-level logs into <code>debug</code>-level logs.\nListen to multiple SDK:s connecting to us over TCP.\nLog an entity using an <code>ArrowMsg</code>.\nSend after all messages in a blueprint to signal that the …\nDense arrow-based storage of N rows of multi-component …\nImplements an asynchronous batcher that coalesces …\nDefines the different thresholds of the associated …\nErrors that can occur when creating/manipulating a …\nErrors that can occur when creating/manipulating a <code>Chunk</code>s, …\nA unique ID for a <code>crate::Chunk</code>.\nContains the error value\nContains the error value\nThe most general log message sent from the SDK to the …\nContains the success value\nContains the success value\nError when parsing configuration from environment.\nA single row’s worth of data (i.e. a single log call).\nA unique ID for a row’s worth of data within a chunk.\nA new recording has begun.\nError spawning one of the background threads.\nA <code>Chunk</code> that is ready for transport. Obtained by calling …\nSplit a chunk if it contains &gt;= rows than this threshold …\nThe component data.\nAll the control, time and component data.\nFlush if the accumulated payload has a size in bytes equal …\nFlush if the accumulated payload has a number of rows …\nDuration of the periodic tick.\nCallbacks you can install on the <code>ChunkBatcher</code>.\nSize of the internal channel of <code>Chunk</code>s.\nSize of the internal channel of commands.\nAuto-generated <code>TUID</code>, uniquely identifying this event and …\nThe schema of the dataframe, and all chunk-level and …\nUser-specified <code>TimePoint</code> for this event.\n<strong>Component</strong>: A color multiplier, usually applied to a whole …\n<strong>Datatype</strong>: Angle in radians.\n<strong>Archetype</strong>: The annotation context provides additional …\n<strong>Datatype</strong>: Annotation info annotating a class id or …\n<strong>Archetype</strong>: 2D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: 3D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: A prepacked 3D asset (<code>.gltf</code>, <code>.glb</code>, <code>.obj</code>, <code>.stl</code>, …\n<strong>Archetype</strong>: A video binary.\nRotation defined with an axis and an angle.\nBlue, Green, Red\nBlue, Green, Red, Alpha\n<strong>Archetype</strong>: A bar chart.\n<strong>Archetype</strong>: 2D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D capsules; cylinders with hemispherical caps.\n<strong>Datatype</strong>: The innermost datatype of an image.\nThe transform describes how to transform into the child …\n<strong>Datatype</strong>: The description of a semantic Class.\n<strong>Archetype</strong>: Empties all the components of an entity.\n<strong>Component</strong>: An RGBA color with unmultiplied/separate alpha, …\n<strong>Datatype</strong>: Specified what color components are present in …\nMany lines are drawn to represent the surface of the shape …\n<strong>Archetype</strong>: A depth image, i.e. as captured by a depth …\n<strong>Archetype</strong>: Spatially disconnect this entity from its …\n<strong>Archetype</strong>: 3D ellipsoids or spheres.\n<strong>Archetype</strong>: An image encoded as e.g. a JPEG or PNG.\n16-bit IEEE-754 floating point, also known as <code>half</code>.\n16bit IEEE-754 floating point, also known as <code>half</code>.\n32-bit IEEE-754 floating point, also known as <code>float</code> or …\n32bit IEEE-754 floating point, also known as <code>float</code> or …\n64-bit IEEE-754 floating point, also known as <code>double</code>.\n64bit IEEE-754 floating point, also known as <code>double</code>.\n<strong>Component</strong>: How a geometric shape is drawn and colored.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Archetype</strong>: Geospatial line strings with positions …\n<strong>Archetype</strong>: Geospatial points with positions expressed in …\n<strong>Archetype</strong>: A list of edges in a graph.\n<strong>Archetype</strong>: A list of nodes in a graph with optional …\n<strong>Component</strong>: Half-size (radius) of a 2D box.\n<strong>Component</strong>: Half-size (radius) of a 3D box.\n16-bit signed integer.\n16bit signed integer.\n32-bit signed integer.\n32bit signed integer.\n64-bit signed integer.\n64bit signed integer.\n8-bit signed integer.\n8bit signed integer.\n<strong>Archetype</strong>: A monochrome or color image.\n<strong>Component</strong>: The metadata describing the contents of a …\n<strong>Archetype</strong>: One or more transforms between the current …\n<strong>Datatype</strong>: A connection between two <code>datatypes::KeypointId</code>s.\nGrayscale luminance intencity/brightness/value, sometimes …\n<strong>Component</strong>: A line strip in 2D space.\n<strong>Component</strong>: A line strip in 3D space.\n<strong>Archetype</strong>: 2D line strips with positions and optional …\n<strong>Archetype</strong>: 3D line strips with positions and optional …\nLines are drawn around the parts of the shape which …\n<strong>Datatype</strong>: A 3x3 Matrix.\n<strong>Component</strong>: A standardized media type (RFC2046, formerly …\n<strong>Archetype</strong>: A 3D triangle mesh as specified by its per-mesh …\n<code>NV12</code> (aka <code>Y_UV12</code>) is a YUV 4:2:0 chroma downsampled form …\nThe transform describes how to transform into the parent …\n<strong>Archetype</strong>: Camera perspective projection (a.k.a. …\n<strong>Datatype</strong>: Specifieds a particular format of an …\n<strong>Archetype</strong>: A 2D point cloud with positions and optional …\n<strong>Archetype</strong>: A 3D point cloud with positions and optional …\n<strong>Component</strong>: A position in 2D space.\n<strong>Component</strong>: A position in 3D space.\n<strong>Datatype</strong>: A Quaternion represented by 4 real numbers.\nRotation defined by a quaternion.\nRed, Green, Blue\nRed, Green, Blue, Alpha\n<strong>Component</strong>: The radius of something, e.g. a point.\n<strong>Datatype</strong>: An RGBA color with unmultiplied/separate alpha, …\nA 3D rotation.\n<strong>Datatype</strong>: 3D rotation represented by a rotation around a …\n<strong>Archetype</strong>: A double-precision scalar, e.g. for use for …\n<strong>Component</strong>: A 3D scale factor.\n<strong>Archetype</strong>: An image made up of integer <code>components::ClassId</code>…\n<strong>Archetype</strong>: Define the style properties for a line series …\n<strong>Archetype</strong>: Define the style properties for a point series …\nThe surface of the shape is filled in with a solid color. …\n<strong>Archetype</strong>: An N-dimensional array of numbers.\n<strong>Datatype</strong>: The underlying storage for <code>archetypes::Tensor</code>.\n<strong>Datatype</strong>: An N-dimensional array of numbers.\n<strong>Datatype</strong>: A single dimension within a multi-dimensional …\n<strong>Component</strong>: A string of text, e.g. for labels and text …\n<strong>Archetype</strong>: A text element intended to be displayed in its …\n<strong>Archetype</strong>: A log entry in a text log, comprised of a text …\n<strong>Component</strong>: The severity level of a text log message.\n<strong>Archetype</strong>: A transform between two 3D spaces, i.e. a pose.\n<strong>Component</strong>: Specifies relation a spatial transform …\n<strong>Component</strong>: The three indices of a triangle in a triangle …\n16-bit unsigned integer.\n16bit unsigned integer.\n32-bit unsigned integer.\n32bit unsigned integer.\n64-bit unsigned integer.\n64bit unsigned integer.\n8-bit unsigned integer.\n8bit unsigned integer.\n<strong>Datatype</strong>: A vector in 2D space.\n<strong>Datatype</strong>: A vector in 3D space.\n<strong>Datatype</strong>: A vector in 4D space.\n<strong>Component</strong>: A vector in 2D space.\n<strong>Component</strong>: A vector in 3D space.\n<strong>Archetype</strong>: References a single video frame.\n<strong>Archetype</strong>: How we interpret the coordinate system of an …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\n<code>YUY2</code> (aka <code>YUYV</code>, <code>YUYV16</code> or <code>NV21</code>), is a YUV 4:2:2 chroma …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\nConfigures the zoom-dependent scalar aggregation.\nA color multiplier applied to the whole asset.\nA color multiplier applied to the whole mesh.\nOptional albedo texture.\nThe format of the <code>albedo_texture_buffer</code>, if any.\nHow much to rotate around the axis.\nAxis to rotate around.\nVisual length of the 3 axes.\nThe asset’s bytes.\nThe asset’s bytes.\nThe encoded content of some image file, e.g. a PNG or JPEG.\nThe raw depth image data.\nThe raw image data.\nThe raw image data.\nThe content/data.\nSets the view coordinates for the camera.\nOptional center positions of the boxes.\nOptional center positions of the boxes.\nOptional center positions of the ellipsoids.\nOptional class Ids for the points.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional class ID for the ellipsoids.\nOptional class ID for the ellipsoids.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the lines.\nOptional <code>components::ClassId</code>s for the lines.\nOptional class Ids for the vertices.\nOptional class Ids for the points.\nOptional class Ids for the points.\nThe color of the bar chart\nColor for the corresponding series.\nColor for the corresponding series.\nOptional color to use for the log line in the Rerun Viewer.\nThe color that will be applied to the annotated entity.\nColormap to use for rendering the depth image.\nOptional colors for the points.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the boxes.\nOptional colors for the capsules.\nOptional colors for the ellipsoids.\nOptional colors for the line strings.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the line strips.\nOptional colors for the line strips.\nOptional colors for the points.\nOptional colors for the points.\nList of class descriptions, mapping class indices to class …\nThe tensor data\nThe expected range of depth values.\nWhether the entity path at which this is logged is …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nA list of node tuples.\nOptionally choose whether the boxes are drawn with lines …\nOptionally choose whether the ellipsoids are drawn with …\nThe format of the image.\nThe format of the image.\nThe format of the image.\nSpecifies if the graph is directed or undirected.\nAll half-extents that make up the batch of boxes.\nAll half-extents that make up the batch of boxes.\nFor each ellipsoid, half of its size on its three axes.\n<code>datatypes::ClassId</code> or <code>datatypes::KeypointId</code> to which this …\nCamera projection, from image coordinates to view …\nThe distance from the camera origin to the image plane …\nThe <code>datatypes::AnnotationInfo</code> for the class.\nThe first point of the pair.\nThe second point of the pair.\nThe <code>datatypes::AnnotationInfo</code> for all of the keypoints.\nThe connections between keypoints.\nOptional keypoint IDs for the points, identifying them …\nOptional keypoint IDs for the points, identifying them …\nThe label that will be shown in the UI.\nOptional text labels for the arrows.\nOptional text labels for the arrows.\nOptional text labels for the boxes.\nOptional text labels for the boxes.\nOptional text labels for the capsules, which will be …\nOptional text labels for the ellipsoids.\nOptional text labels for the node.\nOptional text labels for the line strips.\nOptional text labels for the line strips.\nOptional text labels for the points.\nOptional text labels for the points.\nLengths of the capsules, defined as the distance between …\nThe verbosity level of the message.\nOptional radii for the lines used when the ellipsoid is …\nThe line strings, expressed in EPSG:4326 coordinates …\nWhat shape to use to represent the point\nSize of the marker.\n3x3 transformation matrices.\n3x3 transformation matrix.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the text.\nAn optional floating point value that specifies how long a …\nDisplay name of the series.\nDisplay name of the series.\nThe name of this dimension, e.g. “width”, “height”…\nA list of node IDs.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering the segmentation …\nAll the origin (base) positions for each arrow in the …\nAll the origin (base) positions for each arrow in the …\nScale the radii of the points in the point cloud generated …\nThe EPSG:4326 coordinates for the points …\nOptional center positions of the nodes.\nAll the 2D positions at which the point cloud shows points.\nAll the 3D positions at which the point cloud shows points.\nRotation via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nAngle in radians. One turn is equal to 2π (or τ) radians.\nOptional radii for the arrows.\nOptional radii for the arrows.\nOptional radii for the lines that make up the boxes.\nOptional radii for the lines that make up the boxes.\nRadii of the capsules.\nOptional radii for the line strings.\nOptional radii for the points, effectively turning them …\nOptional radii for nodes.\nOptional radii for the line strips.\nOptional radii for the line strips.\nOptional radii for the points, effectively turning them …\nOptional radii for the points, effectively turning them …\nSpecifies the relation this transform establishes between …\nPixel resolution (usually integers) of child image space. …\nRotation via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nThe scalar value to log.\nScaling factor.\nScaling factors.\nThe shape of the tensor, including optional names for each …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nThe length of this dimension.\nAll the actual 2D line strips that make up the batch.\nAll the actual 3D line strips that make up the batch.\nContents of the text document.\nThe body of the message.\nReferences the closest video frame to this timestamp.\nTranslation vector.\nOptional translations of the capsules.\nTranslation vectors.\nOptional indices for the triangles that make up the mesh.\nThe expected range of values.\nThe values. Should always be a 1-dimensional tensor (i.e. …\nAll the vectors for each arrow in the batch.\nAll the vectors for each arrow in the batch.\nAn optional color for each vertex.\nAn optional normal for each vertex.\nThe positions of each vertex.\nAn optional uv texture coordinate for each vertex.\nOptional reference to an entity with a …\nStroke width for the corresponding series.\nThe directions of the [x, y, z] axes.\nStream log messages to an in-memory binary stream.\nErrors that can occur when creating a <code>BinaryStreamSink</code>.\nThe storage used by <code>BinaryStreamSink</code>.\nStore log messages in memory until you call …\nA sink which forwards all log messages to a callback …\nError creating the file.\nStream log messages to an <code>.rrd</code> file.\nErrors that can occur when creating a <code>FileSink</code>.\nError encoding a log message.\nError encoding a log message.\nWhere the SDK sends its log messages.\nStore log messages directly in memory.\nThe storage used by <code>MemorySink</code>.\nError spawning the file writer thread.\nError spawning the writer thread.\nStream log messages to a Rerun TCP server.\nDrain all buffered <code>LogMsg</code>es and return them.\nDrops all pending data currently sitting in the sink’s …\nBlocks until all pending data in the sink’s send buffers …\nSend this log message.\nSend all these log messages.\nSend a blueprint directly to the log-sink.\nUsed e.g. for frames in a film.\nA date-time represented as nanoseconds since unix epoch\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\n<strong>Datatype</strong>: Angle in radians.\n<strong>Datatype</strong>: A Quaternion represented by 4 real numbers.\n<strong>Datatype</strong>: 3D rotation represented by a rotation around a …\nHow much to rotate around the axis.\nAxis to rotate around.\nAngle in radians. One turn is equal to 2π (or τ) radians.\nFailure to host the Rerun WebSocket server.\nHelper to spawn an instance of the <code>WebViewerServer</code> and …\nFailure to host the web viewer.\nFailure to host a web viewer and/or Rerun server.\nIp to which the http server is bound.\nIf set, adjusts the browser url to force a specific …\nServe log-data over WebSockets and serve a Rerun web …\nIf set to <code>true</code>, opens the default browser after hosting …\nThe url from which a spawned webviewer should source\nIf set, adjusts the browser url to set the video decoder …\nThe port to which the webviewer should bind.\nStream log messages to an in-memory binary stream.\nErrors that can occur when creating a <code>BinaryStreamSink</code>.\nThe storage used by <code>BinaryStreamSink</code>.\nStore log messages in memory until you call …\nA sink which forwards all log messages to a callback …\nError creating the file.\nStream log messages to an <code>.rrd</code> file.\nErrors that can occur when creating a <code>FileSink</code>.\nError encoding a log message.\nError encoding a log message.\nWhere the SDK sends its log messages.\nStore log messages directly in memory.\nThe storage used by <code>MemorySink</code>.\nError spawning the file writer thread.\nError spawning the writer thread.\nStream log messages to a Rerun TCP server.\nAccess the raw <code>MemorySinkStorage</code>\nConvert the stored messages into an in-memory Rerun log …\nDrain the stored messages and return them as an in-memory …\nDrain all buffered <code>LogMsg</code>es and return them.\nDrops all pending data currently sitting in the sink’s …\nFlush the batcher and log encoder to guarantee that all …\nBlocks until all pending data in the sink’s send buffers …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a pair of a new <code>BinaryStreamSink</code> and the associated …\nCreate a new <code>MemorySink</code> with an associated <code>RecordingStream</code>.\nCreate a new <code>CallbackSink</code> with the given callback function.\nStart writing log messages to a file at the given path.\nAn empty buffer.\nConnect to the given address in a background thread. …\nHow many messages are currently written to this memory sink\nRead and consume the current contents of the buffer.\nSend this log message.\nSend all these log messages.\nSend a blueprint directly to the log-sink.\nStart writing log messages to standard output.\nGet the <code>StoreId</code> from the associated <code>RecordingStream</code> if it …\nConsumes and returns the inner array of <code>LogMsg</code>.\nValue used to represent the maximum temporal value a …\nValue used to represent the minimal temporal value a …\nSpecial value used to represent static data.\nUsed e.g. for frames in a film.\nA date-time represented as nanoseconds since unix epoch\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nReturns <code>f64::MIN</code> for <code>Self::STATIC</code>.\nReturns <code>i64::MIN</code> for <code>Self::STATIC</code>.\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFor time timelines.\nFor time timelines.\nFor time timelines.\nFor sequence timelines.\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new temporal <code>TimeInt</code>.\n<strong>Datatype</strong>: Angle in radians.\n<strong>Datatype</strong>: A Quaternion represented by 4 real numbers.\n<strong>Datatype</strong>: 3D rotation represented by a rotation around a …\nHow much to rotate around the axis.\nAxis to rotate around.\nAngle in radians. One turn is equal to 2π (or τ) radians.\nFailure to host the Rerun WebSocket server.\nHelper to spawn an instance of the <code>WebViewerServer</code> and …\nFailure to host the web viewer.\nFailure to host a web viewer and/or Rerun server.\nIp to which the http server is bound.\nIf set, adjusts the browser url to force a specific …\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper to spawn an instance of the <code>WebViewerServer</code>. This …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nServe log-data over WebSockets and serve a Rerun web …\nIf set to <code>true</code>, opens the default browser after hosting …\nThe url from which a spawned webviewer should source\nIf set, adjusts the browser url to set the video decoder …\nThe port to which the webviewer should bind.")